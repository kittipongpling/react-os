{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","get_non_preemptive","set_non_preemtive","get_arrival","set_arrival","get_burst","set_burst","get_balance","set_balance","get_time","align","border","className","map","ps","arrival","burst","balance","defaultValue","onChange","e","parseFloat","target","value","type","onClick","console","log","Array","from","x","handdleTime","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAyGeA,MAtGf,WAAgB,IAAD,EACmCC,IAAMC,SAAS,IADlD,mBACNC,EADM,KACcC,EADd,OAUsBH,IAAMC,SAAS,GAVrC,mBAUNG,EAVM,KAUOC,EAVP,OAYkBL,IAAMC,SAAS,GAZjC,mBAYNK,EAZM,KAYKC,EAZL,OAcsBP,IAAMC,SAAS,GAdrC,mBAcNO,EAdM,KAcOC,EAdP,OAgBgBT,IAAMC,SAAS,GAhB/B,mBAgBNS,EAhBM,KA4Cb,OA5Ca,KA6CX,6BACE,yBAAKC,MAAM,UACT,4EACA,2BAAOC,OAAO,IAAIC,UAAU,aAC1B,wBAAIF,MAAM,UACR,uCACA,4CACA,0CACA,uCACA,yGAGDT,EAAmBY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,QAAvB,OACtB,4BACE,4BAAKH,GACL,4BAAKC,GACL,4BAAKC,GACL,4BACE,2BAAOE,aAAcD,EAASE,SAAU,SAACC,GAAD,OAAOH,EAAUI,WAAWD,EAAEE,OAAOC,QAASC,KAAK,YAE7F,4BACE,4BAAQC,QAAU,kBAhDb,SAACX,EAAGC,EAAQC,EAAMC,GACnCS,QAAQC,IAAIb,EAAIC,EAASC,EAAOC,GAChCW,MAAMC,KAAK5B,GAAoB,SAAA6B,GACzBA,EAAEhB,KAAOA,IACXgB,EAAEhB,GAAKA,EACPgB,EAAEf,QAAUA,EACZe,EAAEd,MAAQA,EACVc,EAAEb,QAAUA,MAIhBf,EAAkBD,GAqCkB8B,CAAYjB,EAAIC,EAASC,EAAOC,KAAxD,gBAIN,6BAGA,4BACE,mCACA,4BACE,2BAAOC,aAAcf,EAAagB,SAAU,SAACC,GAAD,OAAQhB,EAAYiB,WAAWD,EAAEE,OAAOC,SAASC,KAAK,YAEpG,4BACA,2BAAON,aAAcb,EAAWc,SAAa,SAACC,GAAD,OAAOd,EAAUe,WAAWD,EAAEE,OAAOC,SAASC,KAAK,YAGhG,4BACA,2BAAON,aAAgBX,EAAaY,SAAa,SAACC,GAAD,OAAOZ,EAAYa,WAAWD,EAAEE,OAAOC,SAASC,KAAK,YAGtG,4BAAI,4BAAQC,QAvDJ,WAClBvB,EAAkB,GAAD,mBAAKD,GAAL,CAAwB,CACvCa,GAAG,OAAQb,EAAmB+B,OAAO,GACrCjB,QAASZ,EACTa,MAAOX,EACPY,QAASV,MAGXmB,QAAQC,IAAI1B,KA+CE,4EAGR,8CACA,2BAAOuB,KAAK,OAAOD,MAAOd,IAC1B,0CACA,6BACA,6BACA,2BAAOe,KAAK,OAAOD,MAAOd,QCrFdwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a","file":"static/js/main.5bbf29f2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [get_non_preemptive, set_non_preemtive] = React.useState([\n    // {\n    //   ps: \"P1\",\n    //   arrival: 0,\n    //   burst: 0,\n    //   balance: 0\n    // },\n  ]);\n\n  const [get_arrival, set_arrival] = React.useState(0);\n\n  const [get_burst, set_burst] = React.useState(0);\n\n  const [get_balance, set_balance] = React.useState(0);\n\n  const [get_time, set_time] = React.useState(0);\n\n  const handdleTime =(ps,arrival,burst,balance) =>{\n    console.log(ps, arrival, burst, balance)\n    Array.from(get_non_preemptive, x => {\n      if (x.ps === ps) {\n        x.ps = ps\n        x.arrival = arrival\n        x.burst = burst\n        x.balance = balance\n        \n      }\n    })\n    set_non_preemtive(get_non_preemptive)\n  }\nconst handdleSave = () => {\n  set_non_preemtive([...get_non_preemptive,{\n    ps:\"P\" + +(get_non_preemptive.length+1),\n    arrival: get_arrival,\n    burst: get_burst,\n    balance: get_balance\n    \n  }])\n  console.log(get_non_preemptive)\n}\n  \n\n  \n  return (\n    <div>\n      <div align=\"center\">\n        <h1>Non-Preemptive Shortest Jop First Scheduling</h1>\n        <table border=\"2\" className=\"container\">\n          <tr align=\"center\">\n            <td>Process</td>\n            <td>Arrival Time</td>\n            <td>Burst Time</td>\n            <td>Balance</td>\n            <td>บันทึกข้อมูล</td>\n            \n          </tr>\n          {get_non_preemptive.map(({ ps, arrival, burst, balance }) => (\n            <tr>\n              <th>{ps}</th>\n              <th>{arrival}</th>\n              <th>{burst}</th>\n              <th>\n                <input defaultValue={balance} onChange={(e) => balance = parseFloat(e.target.value) } type=\"number\" />\n              </th>\n              <th>\n                <button onClick={ () => handdleTime(ps, arrival, burst, balance)}>Click..</button>\n              </th>\n            </tr>\n          ))}\n          <tr>\n\n          </tr>\n          <tr>\n            <th>NEW</th>\n            <th>\n              <input defaultValue={get_arrival} onChange={(e) =>  set_arrival(parseFloat(e.target.value))} type=\"number\"/>\n            </th>\n            <th>\n            <input defaultValue={get_burst} onChange = { (e) => set_burst(parseFloat(e.target.value))} type=\"number\"/>\n\n            </th>\n            <th>\n            <input defaultValue = {get_balance} onChange = { (e) => set_balance(parseFloat(e.target.value))} type=\"number\"/>\n\n            </th>\n            <th><button onClick={handdleSave}>เพิ่มข้อมูล...</button></th>\n          </tr>\n        </table>\n        <label>Show Time :</label>\n        <input type=\"text\" value={get_time} />\n        <button>Run...</button>\n        <hr/>\n        <div>\n        <input type=\"text\" value={get_time} />\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}