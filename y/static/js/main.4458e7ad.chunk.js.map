{"version":3,"sources":["component/MenuAppBar.js","model/tablenonJSF.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","MenuAppBar","classes","React","useState","auth","anchorEl","setAnchorEl","open","Boolean","handleClose","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","table","minWidth","createData","name","calories","fat","carbs","protein","TablenonJSF","get_non_preemptive","set_non_preemtive","get_arrival","set_arrival","get_burst","set_burst","get_sort_ct","set_sort_ct","useEffect","cloneArray","randomColor","console","log","handdleCheckBalance","interval","setInterval","minarrival","filter","balance","map","e","arrival","minbalance","maxburst","ct","x","Math","min","Infinity","clearInterval","length","result","burst","reduce","i","state","width","height","background","newcolor","transition","checkcolor","max","tat","at","wt","checkzie","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","index","ps","scope","style","backgroundColor","align","Button","psx","colSpan","TextField","defaultValue","onChange","parseFloat","target","value","label","floor","random","toString","TableFooter","fullWidth","sort","a","b","Object","keys","ele","App","Container","maxWidth","Grid","container","direction","justify","alignItems","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4458e7ad.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function MenuAppBar() {\n  const classes = useStyles();\n  const [auth, setAuth] = React.useState(true);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleChange = (event) => {\n    setAuth(event.target.checked);\n  };\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            BF GROUP CPE\n          </Typography>\n          {auth && (\n            <div>\n              <IconButton\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <AccountCircle />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                open={open}\n                onClose={handleClose}\n              >\n                <MenuItem onClick={handleClose}>Profile</MenuItem>\n                <MenuItem onClick={handleClose}>My account</MenuItem>\n              </Menu>\n            </div>\n          )}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Button, TableFooter, TextField } from \"@material-ui/core\";\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n  createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\n  createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\n  createData(\"Eclair\", 262, 16.0, 24, 6.0),\n  createData(\"Cupcake\", 305, 3.7, 67, 4.3),\n  createData(\"Gingerbread\", 356, 16.0, 49, 3.9),\n];\n\nexport default function TablenonJSF() {\n  const [get_non_preemptive, set_non_preemtive] = React.useState([\n    // สเตจ [สเตจ (value),setstatus ฟังชั่น] ค่าเริ่มต้น ตั้งเป็น array\n    // {\n    //   ps: \"P1\",\n    //   arrival: 0,\n    //   burst: 0,\n    //   balance: 0\n    // },\n  ]);\n\n  const [get_arrival, set_arrival] = React.useState(0);\n\n  const [get_burst, set_burst] = React.useState(0);\n\n  const [get_sort_ct, set_sort_ct] = React.useState([]);\n\n  // const [get_balance, set_balance] = React.useState(0);\n\n  // const [get_time, set_time] = React.useState(0);\n\n  // const [get_color, set_color] = React.useState([\n  //   {\n  //     c1:10,\n  //     c2:20\n  //   }\n  // ]);\n\n  const handdleTime = (ps, arrival, burst, balance) => {\n    console.log(ps, arrival, burst, balance);\n    Array.from(get_non_preemptive, (x) => {\n      //การเปลี่ยนข้อมูลใน array\n      if (x.ps === ps) {\n        x.ps = ps;\n        x.arrival = arrival;\n        x.burst = burst;\n        x.balance = balance;\n        x.check = false;\n        x.at = arrival;\n      }\n    });\n    set_non_preemtive(get_non_preemptive);\n  };\n  const handdleDel = (psx) => {\n    set_non_preemtive(get_non_preemptive.filter(({ ps }) => ps !== psx)); // เราดึงค่า  ps ตามเงื่อนไขของเรา\n  };\n\n  const handdleSave = () => {\n    set_non_preemtive([\n      ...get_non_preemptive, // แตกค่า ... แล้วจะเพิ่มค่าใหม่เข้าไป\n      {\n        ps: \"P\" + +(get_non_preemptive.length + 1), //\n        arrival: get_arrival, // ส่งค่ามาจาก stat set ไว้ข้างบน\n        burst: get_burst,\n        balance: get_burst,\n        at: get_arrival,\n        ct: 0,\n        tat: 0,\n        wt: 0,\n        color: {},\n        newcolor: Math.floor(Math.random() * 16777215).toString(16),\n        state: \"Ready\"\n      },\n    ]);\n    // console.log(get_non_preemptive);\n  };\n\n  useEffect(() => {\n    cloneArray();\n  }, [get_non_preemptive]);\n\n  const cloneArray = (randomColor) => {\n    set_sort_ct([...get_non_preemptive]);\n  };\n  console.log(get_sort_ct);\n\n  const handdleCheckBalance = () => {\n    // console.log(\"ทำงาน...\");\n\n    const interval = setInterval(() => {\n      //กำหนดระยะเวลาการทำงานแบบต่อเนื่องตลอด ตามระยะเวลาที่เราระบุ\n      const minarrival = get_non_preemptive\n        .filter(({ balance }) => balance !== 0)\n        .map((e) => e.arrival);\n      // console.log(...minarrival);\n\n      const minbalance = get_non_preemptive\n        .filter(({ balance }) => balance !== 0)\n        .map((e) => e.balance);\n      // console.log(...minbalance);\n\n      const maxburst = get_non_preemptive.map((e) => e.ct);\n      // console.log(maxburst);\n\n      set_non_preemtive(\n        get_non_preemptive.map((x) => {\n          // console.log(\"x\");\n          // console.log(Math.min(...minarrival));\n          // console.log(x.ps);\n\n          if (Math.min(...minarrival) === Infinity) {\n            clearInterval(interval);\n          }\n          // get_non_preemptive.filter(({ balance }) => balance === \"P1\"\n\n          // if(get_non_preemptive.map(({ arrival }) => arrival === 0)){\n          //   if(x.balance === Math.min(...minbalance)){\n          //     x.balance = x.balance - 1;\n          //   }\n          // }\n\n\n          if (\n            get_non_preemptive.filter(({ balance }) => balance === 0).length > 0\n          ) {\n            \n            if (x.balance === Math.min(...minbalance)) {\n              if (get_non_preemptive.length > 0) {\n                let result = get_non_preemptive\n                  .map(({ burst }) => burst)\n                  .reduce((burst, i) => burst + i);\n                console.log(result);\n                x.state = \"Running\";\n\n                x.color = {\n                  width: (x.burst - x.balance + 1) / (result / 100) + \"%\",\n\n                  height: \"50px\",\n                  background: \"#\" + x.newcolor,\n                  transition: \"width 2s\",\n                };\n              }\n              \n              if (x.balance > 0) {\n                console.log(\n                  get_non_preemptive.reduce(({ burst }, i) => burst + i)\n                );\n\n                if (x.balance === 1) {\n                  x.state = \"terminated\";\n\n                  x.checkcolor = true;\n                  x.ct = +Math.max(...maxburst) + +x.burst;\n                  x.tat = x.ct - x.at;\n                  x.wt = x.tat - x.burst;\n                  // console.log(maxburst);\n                }\n\n                x.balance = x.balance - 1;\n              }\n            }\n          } else {\n\n            if (x.arrival === Math.min(...minarrival)) {\n\n              if( get_non_preemptive.map(({ arrival }) => arrival === 0)){\n                // if(x.balance === Math.min(...minbalance)){\n                //   x.balance = x.balance - 1;\n                // }\n              }\n\n\n              if (get_non_preemptive.length > 0) {\n                let result = get_non_preemptive\n                  .map(({ burst }) => burst)\n                  .reduce((burst, i) => burst + i);\n                console.log(result);\n              }\n              if (get_non_preemptive.length > 0) {\n                let result = get_non_preemptive\n                  .map(({ burst }) => burst)\n                  .reduce((burst, i) => burst + i);\n                console.log(result);\n\n                x.state = \"Running\";\n\n                x.color = {\n                  width: (x.burst - x.balance + 1) / (result / 100) + \"%\",\n\n                  height: \"50px\",\n                  background: \"#\" + x.newcolor,\n                  transition: \"width 2s\"\n                };\n              }\n              \n              if (x.balance > 0) {\n                // { backgroundColor: !checkcolor ? \"#fff\" : \"red\" }\n\n                if (x.balance === 1) {\n                  x.state = \"terminated\";\n                  x.checkcolor = true;\n                  x.checkzie = false;\n                  x.ct = x.burst;\n\n                  x.tat = x.ct - x.at;\n                  x.wt = x.tat - x.burst;\n                }\n// if(get_non_preemptive.map(({ arrival }) => arrival === 0)){\n                x.balance = x.balance - 1;\n// }\n              }\n            }\n          }\n          return x;\n          // console.log(get_non_preemptive.filter(({balance}) => balance === 0));\n        })\n      );\n    }, 1000);\n  };\n\n  // const color = () => {\n  //   set_non_preemtive(\n  //     Array.from(get_non_preemptive,(x) =>{\n\n  //       x.Average =\n  //     })\n  //   )\n  // }\n\n  // let seho = get_color.map((x) =>{\n\n  // })\n\n  //  if(get_non_preemptive.length > 0) {\n  //     let result = get_non_preemptive.map(({burst}) => burst).reduce((burst, i) => burst + i);\n  //     console.log(result)\n  //  }\n\n  // if(get_sort_ct.length >0){\n  //   let cct = get_sort_ct.filter(({ct})=> ct > 0).sort((a, b) => {\n  //     return a?.ct-b?.ct;\n  //   })\n  //   console.log(cct , 'ct tatol');\n  // }\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Process</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Arrival Time (ms)</TableCell>\n              <TableCell>Burst Time&nbsp;(ms)</TableCell>\n              <TableCell>Balance&nbsp;</TableCell>\n              <TableCell>CT&nbsp;</TableCell>\n              <TableCell>TAT(ct-at)&nbsp;</TableCell>\n              <TableCell>WT(tat-bt)&nbsp;</TableCell>\n\n              <TableCell>deleteProcess&nbsp;</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {get_non_preemptive.map(\n              //map วนลูป\n              (\n                {\n                  ps,\n                  arrival,\n                  burst,\n                  balance,\n                  checkcolor,\n                  ct,\n                  tat,\n                  wt,\n                  newcolor,\n                  state,\n                },\n                index\n              ) => (\n                <TableRow>\n                  <TableCell\n                    component=\"th\"\n                    scope=\"row\"\n                    style={{ background: \"#\" + newcolor }}\n                  >\n                    {ps}\n                  </TableCell>\n                  <TableCell>{state}</TableCell>\n                  <TableCell>{arrival}</TableCell>\n                  <TableCell>{burst}</TableCell>\n                  <TableCell\n                    style={{ backgroundColor: !checkcolor ? \"#fff\" : \"red\" }}\n                  >\n                    {balance}\n                  </TableCell>\n                  <TableCell>{ct}</TableCell>\n                  <TableCell>{tat}</TableCell>\n                  <TableCell>{wt}</TableCell>\n                  <TableCell align=\"right\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={() => handdleDel(ps)}\n                    >\n                      ลบ\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              )\n            )}\n\n            <TableRow>\n              <TableCell colSpan={9}></TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell></TableCell>\n              <TableCell component=\"th\" scope=\"row\">\n                NEW\n              </TableCell>\n              <TableCell>\n                <TextField\n                  defaultValue={get_arrival}\n                  onChange={(e) => set_arrival(parseFloat(e.target.value))}\n                  id=\"outlined-basic\"\n                  label=\"Arrival\"\n                  variant=\"outlined\"\n                />\n                {/* <input\n                  defaultValue={get_arrival}\n                  onChange={(e) => set_arrival(parseFloat(e.target.value))}\n                  type=\"number\"\n                /> */}\n              </TableCell>\n              <TableCell>\n                {/* <input\n                  defaultValue={get_burst}\n                  onChange={(e) => set_burst(parseFloat(e.target.value))}\n                  type=\"number\"\n                /> */}\n                <TextField\n                  defaultValue={get_burst}\n                  onChange={(e) => set_burst(parseFloat(e.target.value))}\n                  id=\"outlined-basic\"\n                  label=\"Burst\"\n                  variant=\"outlined\"\n                />\n              </TableCell>\n\n              {/* <input\n                  defaultValue={get_balance}\n                  onChange={(e) => set_balance(parseFloat(e.target.value))}\n                  type=\"number\"\n                /> */}\n\n              <TableCell>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handdleSave}\n                >\n                  [เพิ่มข้อมูล]\n                </Button>\n               \n              </TableCell>\n              <TableCell>\n              <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handdleCheckBalance}\n                >\n                  [RUN]\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TableCell colSpan={9}>\n                <Button\n                  onClick={handdleCheckBalance}\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                >\n                  RUN\n                </Button>\n              </TableCell>\n            </TableRow>\n\n            {/* <label>Show Time :</label>\n            <input type=\"text\" value={get_time} />\n            <button onClick={handdleCheckBalance}>Run...</button>\n            <hr />\n            <div>\n              <input type=\"text\" value={get_time} />\n            </div> */}\n          </TableFooter>\n        </Table>\n      </TableContainer>\n      {get_sort_ct\n        .filter(({ ct }) => ct > 0)\n        .sort((a, b) => a?.ct - b?.ct)\n        .filter(({ color }) => Object.keys(color).length > 0)\n        .map((ele) => {\n          return <div style={ele.color}></div>;\n        })}\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport MenuAppBar from \"./component/MenuAppBar\";\nimport TablenonJSF from \"./model/tablenonJSF\";\nimport { Grid, Container } from \"@material-ui/core\";\n{/* <input defaultValue={balance} onChange={(e) => balance = parseFloat(e.target.value) } type=\"number\" /> */}\nfunction App() {\n  \n\n  return (\n    <div>\n      <MenuAppBar></MenuAppBar>\n      <div align=\"center\">\n        <h1>Non-Preemptive Shortest Jop First Scheduling</h1>\n        \n       \n      </div>\n      <Container maxWidth=\"xl\">\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"center\"\n      >\n          \n          <TablenonJSF></TablenonJSF>\n          \n          \n      </Grid>\n      </Container>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}